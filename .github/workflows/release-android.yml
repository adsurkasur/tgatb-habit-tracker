name: Release Android APK

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0

jobs:
  build-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check Android signing secrets
        run: |
          missing=0
          if [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "ERROR: ANDROID_KEYSTORE_BASE64 secret is missing or empty." >&2
            missing=1
          fi
          if [ -z "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ]; then
            echo "ERROR: ANDROID_KEYSTORE_PASSWORD secret is missing or empty." >&2
            missing=1
          fi
          if [ -z "${{ secrets.ANDROID_KEY_ALIAS }}" ]; then
            echo "ERROR: ANDROID_KEY_ALIAS secret is missing or empty." >&2
            missing=1
          fi
          if [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then
            echo "ERROR: ANDROID_KEY_PASSWORD secret is missing or empty." >&2
            missing=1
          fi
          if [ "$missing" -eq 1 ]; then
            echo "One or more required Android signing secrets are missing. Failing early."
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive version from tag
        id: version
        run: |
          TAG="${GITHUB_REF##*/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Decode Google Services JSON
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > android/app/google-services.json

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Verify package version matches tag
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF##*/}
          TAG_VERSION=${TAG_VERSION#v}
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Package version $PKG_VERSION does not match tag v$TAG_VERSION" >&2
            exit 1
          fi

      - name: Build web assets
        run: npm run build

      - name: List contents of out directory
        run: ls -lR out

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Prepare signing keystore (if provided)
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "SIGNING_KEYSTORE_BASE64 is populated; decoding..."
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore
            echo "Keystore file created at android/app/release.keystore"
          else
            echo "SIGNING_KEYSTORE_BASE64 is empty. Keystore will not be prepared."
          fi

      - name: Debug keystore password and alias
        run: |
          echo 'Keystore password (hex and length):'
          echo -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" | od -c
          echo -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" | wc -c
          echo 'Key alias (hex and length):'
          echo -n "${{ secrets.ANDROID_KEY_ALIAS }}" | od -c
          echo -n "${{ secrets.ANDROID_KEY_ALIAS }}" | wc -c
          echo 'Key password (hex and length):'
          echo -n "${{ secrets.ANDROID_KEY_PASSWORD }}" | od -c
          echo -n "${{ secrets.ANDROID_KEY_PASSWORD }}" | wc -c

      - name: Validate Keystore
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          echo "Verifying keystore..."
          if [ ! -f android/app/release.keystore ]; then
            echo "ERROR: Keystore file not found at android/app/release.keystore" >&2
            exit 1
          fi
          keytool -list -v -keystore android/app/release.keystore -storepass "$KEYSTORE_PASSWORD" -alias "$KEY_ALIAS" || (echo "ERROR: keytool failed" >&2; exit 1)
          echo "Keystore verification successful."

      - name: Build Capacitor Android project
        run: npx cap build android

      - name: Build release & debug APKs
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD || '' }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS || '' }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD || '' }}
        run: |
          if [ -f app/release.keystore ]; then
            echo 'Applying signing config via gradle properties'
            # Write to android/gradle.properties only
            echo "MYAPP_UPLOAD_STORE_FILE=app/release.keystore" >> gradle.properties
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD" >> gradle.properties
            echo "MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS" >> gradle.properties
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD" >> gradle.properties
          fi
          ./gradlew assembleDebug assembleRelease --stacktrace

      - name: List generated APKs
        run: ls -R android/app/build/outputs/apk || true

      - name: Normalize APK filenames
        id: rename
        run: |
            VERSION=${{ steps.version.outputs.tag }}
            OUTDIR=android/app/build/outputs/apk
            mkdir -p renamed
            # Debug APK
            if [ -f "$OUTDIR/debug/app-debug.apk" ]; then
              cp "$OUTDIR/debug/app-debug.apk" "renamed/tgatb-${VERSION}-debug.apk"
            fi
            # Release APK (signed)
            if [ -f "$OUTDIR/release/app-release.apk" ]; then
              cp "$OUTDIR/release/app-release.apk" "renamed/tgatb-${VERSION}.apk"
            else
              echo "ERROR: Signed APK not found at $OUTDIR/release/app-release.apk" >&2
              echo "Check your app/build.gradle signingConfigs and CI secrets." >&2
              ls -l $OUTDIR/release
              exit 1
            fi
            # Release APK (unsigned)
            if [ -f "$OUTDIR/release/app-release-unsigned.apk" ]; then
              cp "$OUTDIR/release/app-release-unsigned.apk" "renamed/tgatb-${VERSION}-unsigned.apk"
            fi
            ls -l renamed || true

      - name: Verify APK signature
        run: |
            VERSION=${{ steps.version.outputs.tag }}
            jarsigner -verify -verbose -certs renamed/tgatb-${VERSION}.apk
        continue-on-error: false

      - name: Determine if pre-release
        id: prerelease_check
        run: |
          TAG_NAME="${{ steps.version.outputs.tag }}"
          if [[ "$TAG_NAME" == *alpha* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload signed release APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: renamed/tgatb-${{ steps.version.outputs.tag }}.apk
          fail_on_unmatched_files: true
          prerelease: ${{ steps.prerelease_check.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
