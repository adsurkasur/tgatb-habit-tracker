name: Release Android APK

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0

jobs:
  build-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive version from tag
        id: version
        run: |
          TAG="${GITHUB_REF##*/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Verify package version matches tag
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF##*/}
          TAG_VERSION=${TAG_VERSION#v}
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Package version $PKG_VERSION does not match tag v$TAG_VERSION" >&2
            exit 1
          fi

      - name: Build web assets
        run: npm run build

      - name: Capacitor sync (regenerate native + plugins)
        run: npx cap sync android

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Prepare signing keystore (if provided)
        if: env.SIGNING_KEYSTORE_BASE64 != ''
        env:
          SIGNING_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 || '' }}
        run: |
          if [ -n "$SIGNING_KEYSTORE_BASE64" ]; then
            echo "$SIGNING_KEYSTORE_BASE64" | base64 -d > android/release.keystore
          fi

      - name: Build release & debug APKs
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD || '' }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS || '' }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD || '' }}
        run: |
          if [ -f release.keystore ]; then
            echo 'Applying signing config via gradle properties'
            # Write to android/gradle.properties
            echo "MYAPP_UPLOAD_STORE_FILE=release.keystore" >> gradle.properties
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD" >> gradle.properties
            echo "MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS" >> gradle.properties
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD" >> gradle.properties
            # Also write to project root gradle.properties for compatibility
            echo "MYAPP_UPLOAD_STORE_FILE=android/release.keystore" >> ../gradle.properties
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD" >> ../gradle.properties
            echo "MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS" >> ../gradle.properties
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD" >> ../gradle.properties
          fi
          ./gradlew assembleDebug assembleRelease --stacktrace

      - name: List generated APKs
        run: ls -R android/app/build/outputs/apk || true

      - name: Normalize APK filenames
        id: rename
        run: |
          VERSION=${{ steps.version.outputs.tag }}
          VERSION=${VERSION#v}
          OUTDIR=android/app/build/outputs/apk
          mkdir -p renamed
          # Debug APK
          if [ -f "$OUTDIR/debug/app-debug.apk" ]; then
            cp "$OUTDIR/debug/app-debug.apk" "renamed/tgatb-${VERSION}-debug.apk"
          fi
          # Release APK (signed)
          if [ -f "$OUTDIR/release/app-release.apk" ]; then
            cp "$OUTDIR/release/app-release.apk" "renamed/tgatb-${VERSION}.apk"
          else
            echo "ERROR: Signed APK not found at $OUTDIR/release/app-release.apk" >&2
            echo "Check your app/build.gradle signingConfigs and CI secrets." >&2
            ls -l $OUTDIR/release
            exit 1
          fi
          # Release APK (unsigned)
          if [ -f "$OUTDIR/release/app-release-unsigned.apk" ]; then
            cp "$OUTDIR/release/app-release-unsigned.apk" "renamed/tgatb-${VERSION}-unsigned.apk"
          fi
          ls -l renamed || true

      - name: Verify APK signature
        run: |
          VERSION=${{ steps.version.outputs.tag }}
          VERSION=${VERSION#v}
          jarsigner -verify -verbose -certs renamed/tgatb-${VERSION}.apk
        continue-on-error: false

      - name: Upload signed release APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: renamed/tgatb-${{ steps.version.outputs.tag }}.apk
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
